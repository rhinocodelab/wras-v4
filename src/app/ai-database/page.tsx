
'use client';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { clearAllTranslations, getTrainRoutes, clearAllAudio, getAnnouncementTemplates, clearAllTemplateAudio, getCustomAudioFiles, clearAllCustomAudio } from '@/app/actions';
import { useToast } from '@/hooks/use-toast';
import { Loader2 } from 'lucide-react';

export default function AiDatabasePage({ onViewChange }: { onViewChange: (view: string) => void }) {
  const [isClearing, setIsClearing] = useState(false);
  const [isClearingAudio, setIsClearingAudio] = useState(false);
  const [isClearingTemplateAudio, setIsClearingTemplateAudio] = useState(false);
  const [isClearingCustomAudio, setIsClearingCustomAudio] = useState(false);
  const [routesExist, setRoutesExist] = useState(false);
  const [templatesExist, setTemplatesExist] = useState(false);
  const [customAudioExist, setCustomAudioExist] = useState(false);
  const { toast } = useToast();

  const handleViewTranslations = () => onViewChange('translations');
  const handleViewAudio = () => onViewChange('audio');
  const handleViewTemplateAudio = () => onViewChange('template-audio');
  const handleViewCustomAudio = () => onViewChange('custom-audio');
  
  useEffect(() => {
    getTrainRoutes().then(routes => {
        setRoutesExist(routes.length > 0)
    });
    getAnnouncementTemplates().then(templates => {
        setTemplatesExist(templates.length > 0)
    });
    getCustomAudioFiles().then(files => {
        setCustomAudioExist(files.length > 0)
    });
  }, [])

  const handleClearTranslations = async () => {
    setIsClearing(true);
    try {
      const result = await clearAllTranslations();
      toast({
        title: 'Success',
        description: result.message,
      });
    } catch (error) {
      toast({
        variant: 'destructive',
        title: 'Error',
        description: 'Failed to clear translations.',
      });
      console.error('Failed to clear translations:', error);
    } finally {
        setIsClearing(false);
    }
  };

  const handleClearAudio = async () => {
    setIsClearingAudio(true);
    try {
      const result = await clearAllAudio();
      toast({
        title: 'Success',
        description: result.message,
      });
    } catch (error) {
      toast({
        variant: 'destructive',
        title: 'Error',
        description: 'Failed to clear audio data.',
      });
      console.error('Failed to clear audio:', error);
    } finally {
        setIsClearingAudio(false);
    }
  };

  const handleClearTemplateAudio = async () => {
    setIsClearingTemplateAudio(true);
    try {
      const result = await clearAllTemplateAudio();
      toast({
        title: 'Success',
        description: result.message,
      });
    } catch (error) {
      toast({
        variant: 'destructive',
        title: 'Error',
        description: 'Failed to clear template audio data.',
      });
      console.error('Failed to clear template audio:', error);
    } finally {
        setIsClearingTemplateAudio(false);
    }
  }

  const handleClearCustomAudio = async () => {
    setIsClearingCustomAudio(true);
    try {
      const result = await clearAllCustomAudio();
      toast({
        title: 'Success',
        description: result.message,
      });
    } catch (error) {
      toast({
        variant: 'destructive',
        title: 'Error',
        description: 'Failed to clear custom audio data.',
      });
      console.error('Failed to clear custom audio:', error);
    } finally {
        setIsClearingCustomAudio(false);
    }
  }


  return (
    <div className="w-full">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-lg font-semibold md:text-2xl">AI Database</h1>
          <p className="text-muted-foreground">
            Explore and manage AI-generated data assets.
          </p>
        </div>
      </div>

      <div className="mt-4 grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        <Card>
          <CardHeader>
            <CardTitle className="text-xl">AI Generated Text Translation</CardTitle>
            <CardDescription>
              View multilingual translations of train route data generated by AI.
            </CardDescription>
          </CardHeader>
          <CardContent className="flex flex-wrap gap-2">
            <Button onClick={handleViewTranslations} disabled={!routesExist} size="sm">
              View Translations
            </Button>
            <AlertDialog>
              <AlertDialogTrigger asChild>
                <Button variant="destructive" disabled={isClearing || !routesExist} size="sm">
                    {isClearing && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                    {isClearing ? 'Clearing...' : 'Clear All'}
                </Button>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                  <AlertDialogDescription>
                    This action cannot be undone. This will permanently delete all
                    translation data from the database.
                  </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel>Cancel</AlertDialogCancel>
                  <AlertDialogAction onClick={handleClearTranslations}>
                    Continue
                  </AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle className="text-xl">AI Text-to-Speech</CardTitle>
            <CardDescription>
              Listen to AI-generated audio announcements for train routes.
            </CardDescription>
          </CardHeader>
          <CardContent className="flex flex-wrap gap-2">
            <Button onClick={handleViewAudio} disabled={!routesExist} size="sm">
              View Audio
            </Button>
            <AlertDialog>
              <AlertDialogTrigger asChild>
                <Button variant="destructive" disabled={isClearingAudio || !routesExist} size="sm">
                    {isClearingAudio && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                    {isClearingAudio ? 'Clearing...' : 'Clear All'}
                </Button>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                  <AlertDialogDescription>
                    This action cannot be undone. This will permanently delete all
                    generated audio files and data from the database.
                  </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel>Cancel</AlertDialogCancel>
                  <AlertDialogAction onClick={handleClearAudio}>
                    Continue
                  </AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle className="text-xl">AI Template Audio</CardTitle>
            <CardDescription>
              Listen to AI-generated audio for each announcement template.
            </CardDescription>
          </CardHeader>
          <CardContent className="flex flex-wrap gap-2">
            <Button onClick={handleViewTemplateAudio} disabled={!templatesExist} size="sm">
              View Audio
            </Button>
            <AlertDialog>
              <AlertDialogTrigger asChild>
                <Button variant="destructive" disabled={isClearingTemplateAudio || !templatesExist} size="sm">
                    {isClearingTemplateAudio && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                    {isClearingTemplateAudio ? 'Clearing...' : 'Clear All'}
                </Button>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                  <AlertDialogDescription>
                    This action cannot be undone. This will permanently delete all
                    generated audio for announcement templates.
                  </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel>Cancel</AlertDialogCancel>
                  <AlertDialogAction onClick={handleClearTemplateAudio}>
                    Continue
                  </AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle className="text-xl">AI Custom Audio</CardTitle>
            <CardDescription>
              View and manage all saved custom audio files.
            </CardDescription>
          </CardHeader>
          <CardContent className="flex flex-wrap gap-2">
            <Button onClick={handleViewCustomAudio} disabled={!customAudioExist} size="sm">
              View Audio Files
            </Button>
            <AlertDialog>
              <AlertDialogTrigger asChild>
                <Button variant="destructive" disabled={isClearingCustomAudio || !customAudioExist} size="sm">
                    {isClearingCustomAudio && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                    {isClearingCustomAudio ? 'Clearing...' : 'Clear All'}
                </Button>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                  <AlertDialogDescription>
                    This action cannot be undone. This will permanently delete all
                    custom audio files and data from the database.
                  </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel>Cancel</AlertDialogCancel>
                  <AlertDialogAction onClick={handleClearCustomAudio}>
                    Continue
                  </AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
